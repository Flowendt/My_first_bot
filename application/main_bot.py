
import telebot
import logging
import application.game.main_game as m
from telebot import types 
from telebot.types import Message
from telebot.async_telebot import AsyncTeleBot




from django.conf import settings


CHAT_ID = [-1002220173477]
logger = logging.getLogger(__name__)

bot = AsyncTeleBot(settings.TOKEN_BOT, parse_mode='HTML')
telebot.logger.setLevel(settings.LOG_LEVEL)

player_1_score = 0
player_2_score = 0
# Handle '/start' and '/help'
@bot.message_handler(commands=['help', 'start'])
async def send_welcome(message):
    text = '–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ –±–æ—Ç —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–≥—Ä—É "–û–ß–ö–û".\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ 24 –æ—á–∫–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞—á–∞—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã '
    markup = types.ReplyKeyboardMarkup()
    button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
    markup.add(button_start)
    await bot.send_message(message.chat.id, text = text,reply_markup=markup)

@bot.message_handler(content_types=['text'])
async def unfo(message):
    if message.text == '–ù–ê–ß–ê–¢–¨':
        markup = types.ReplyKeyboardMarkup()
        button_to_take = types.KeyboardButton("–í–ó–Ø–¢–¨")
        button_to_leave = types.KeyboardButton("–û–°–¢–ê–í–ò–¢–¨")
        markup.add(button_to_take,button_to_leave)
        await bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ "–í–ó–Ø–¢–¨", —á—Ç–æ-–±—ã –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ "–û–°–¢–ê–í–ò–¢–¨"', reply_markup=markup)
    elif message.text == '–í–ó–Ø–¢–¨':
        global player_1_score
        global player_2_score
        m.main_games()
        markup = types.ReplyKeyboardMarkup()
        button_to_take = types.KeyboardButton("–í–ó–Ø–¢–¨")
        button_to_leave = types.KeyboardButton("–û–°–¢–ê–í–ò–¢–¨")
        markup.add(button_to_take,button_to_leave)
        await bot.send_message(message.chat.id,f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:{m.player_1_score}', reply_markup=markup)
        if m.player_1_score >= 24:
            markup = types.ReplyKeyboardMarkup()
            button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
            markup.add(button_start)
            if m.player_1_score and m.player_2_score >= 24:
                markup = types.ReplyKeyboardMarkup()
                button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
                markup.add(button_start)
                await bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòâ–ù–ò–ß–¨–Å–ôüòâ\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ 24 –∏–ª–∏ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤,–∞ –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫:{m.player_2_score}',  reply_markup=markup)
                m.player_1_score = 0
                m.player_2_score = 0
            elif m.player_2_score < 24:
                markup = types.ReplyKeyboardMarkup()
                button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
                markup.add(button_start)
                await bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üò¢–ü–û–ë–ï–î–û–ô –°–û–ü–ï–†–ù–ò–ö–êüò¢\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ 24 –∏–ª–∏ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤,–∞ –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫:{m.player_2_score}',  reply_markup=markup)
                m.player_1_score = 0
                m.player_2_score = 0
    elif message.text == '–û–°–¢–ê–í–ò–¢–¨':
        markup = types.ReplyKeyboardMarkup()
        button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
        markup.add(button_start)
        if m.player_1_score < m.player_2_score:
            markup = types.ReplyKeyboardMarkup()
            button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
            markup.add(button_start)
            await bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üò¢–ü–û–ë–ï–î–û–ô –°–û–ü–ï–†–ù–ò–ö–êüò¢\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ –º–µ–Ω—å—à–µ –æ—á–∫–æ–≤ —á–µ–º —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:{m.player_2_score}',  reply_markup=markup)
            m.player_1_score = 0
            m.player_2_score = 0
        elif m.player_1_score > m.player_2_score:
            markup = types.ReplyKeyboardMarkup()
            button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
            markup.add(button_start)
            await bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –≤—ã ‚ù§Ô∏è‚Äçüî•–ü–û–ë–ï–î–ò–õ–ò‚ù§Ô∏è‚Äçüî•\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ —á–µ–º —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:{m.player_2_score}',  reply_markup=markup)
            m.player_1_score = 0
            m.player_2_score = 0
        elif m.player_1_score == m.player_2_score:
            markup = types.ReplyKeyboardMarkup()
            button_start = types.KeyboardButton("–ù–ê–ß–ê–¢–¨")
            markup.add(button_start)
            await bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üòâ–ù–ò–ß–¨–Å–ôüòâ\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤\n–ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:{m.player_2_score}',  reply_markup=markup)
            m.player_1_score = 0
            m.player_2_score = 0

    else:
        text = '–ù–∞–∂–º–∏—Ç–µ "–ù–ê–ß–ê–¢–¨" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã'
        await bot.send_message(message.chat.id, text = text)
        





@bot.chat_member_handler() 
async def chat_member_handler_bot(message: Message):
    if message.chat.id is not CHAT_ID:
        return None
    status = message.difference.get('status')
    invite_link = message.invite_link
    full_name = message.from_user.full_name
    username = message.from_user.username
    id = message.from_user.id
    invite_link_name = ''
    invite_link_url = ''
    try:
        invite_link_name = getattr(invite_link, 'name')
        invite_link_url = getattr(invite_link, 'invite_link')
    except AttributeError as err:
        logger.info(f'–ù–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {err}')
    status_subscriber = status[1]
    if status_subscriber == 'member':
        status_text = '‚ù§Ô∏è‚Äçüî• –ü–æ–¥–ø–∏—Å–∞–ª—Å—è'
    elif status_subscriber == 'left':
        status_text = 'üíî –û—Ç–ø–∏—Å–∞–ª—Å—è'
    else:
        status_text = 'üòê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    text_message = (f'–°—Ç–∞—Ç—É—Å: {status_text}\n'
                    f'–ò–º—è: {full_name}\n'
                    f'ID: {id}')
    if username:
        text_message += f'\n<b>–ù–∏–∫–∏–Ω–µ–π–º</b>: @{username}'
    if invite_link_name:
        text_message += f'\n–ò–º—è —Å—Å—ã–ª–∫–∏: {invite_link_name}'
    if invite_link_url:
        text_message += f'\n<b>URL</b>: {invite_link_url}'
    
    await bot.send_message(chat_id=settings.TELEGRAM_ID_ADMIN, text=text_message)



# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
    'text', 'location', 'contact', 'sticker'])
async def default_command(message):
    await bot.send_message(message.chat.id, "I don't understand you. Please write /start or /help ")